name: Centralized CI (react,node,java) Maven with json conf
on:
  workflow_call:
    secrets:
      SONAR_TOKEN:
        required: true
      CODECOV_TOKEN:
        required: true
      WORKLOAD_IDENTITY_PROVIDER_ID:
        required: true
      SERVICE_ACCOUNT:
        required: true    
jobs:
#JOB1: setup-install-and-test
  maven_setup_install-test:
    name:  maven_setup_install-test
    runs-on: "ubuntu-latest"
    timeout-minutes: 90
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      NODE_VERSION: "16.17.0"
      SPRING_OUTPUT_ANSI_ENABLED: DETECT
      SPRING_JPA_SHOW_SQL: false
      JHI_DISABLE_WEBPACK_LOGS: true
      NG_CLI_ANALYTICS: false
    steps:
      - uses: actions/checkout@v3
      - id: config
        run: echo "::set-output name=config::`jq -M -c '.' .github/workflow-config.json`"
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ fromJson(steps.config.outputs.config).node-version }}
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ fromJson(steps.config.outputs.config).java-version }}
      - name: Install node.js packages
        run: npm install
      - name: Run backend test
        run: |
          chmod +x mvnw
          npm run ci:backend:test
      - name: Run frontend test
        run: npm run ci:frontend:test
#JOB2: Codecov
  codecov:
    name:  codecov
    needs: [maven_setup_install-test]
    runs-on: "ubuntu-latest"
    timeout-minutes: 90
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      NODE_VERSION: "16.17.0"
      SPRING_OUTPUT_ANSI_ENABLED: DETECT
      SPRING_JPA_SHOW_SQL: false
      JHI_DISABLE_WEBPACK_LOGS: true
      NG_CLI_ANALYTICS: false
    steps:
      - uses: actions/checkout@v3      
      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: codecov-umbrella 
          verbose: true
#JOB3: Sonar
  sonar:
    name:  sonar
    needs: [maven_setup_install-test]
    runs-on: "ubuntu-latest"
    timeout-minutes: 90
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      NODE_VERSION: "16.17.0"
      SPRING_OUTPUT_ANSI_ENABLED: DETECT
      SPRING_JPA_SHOW_SQL: false
      JHI_DISABLE_WEBPACK_LOGS: true
      NG_CLI_ANALYTICS: false
    steps:
      - uses: actions/checkout@v3
      - id: config
        run: echo "::set-output name=config::`jq -M -c '.' .github/workflow-config.json`"                
      - name: Analyze code with SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ ! -z "$SONAR_TOKEN" ]; then
              ./mvnw -ntp initialize sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.organization=${{ fromJson(steps.config.outputs.config).sonar_organization }} -Dsonar.projectKey=${{ fromJson(steps.config.outputs.config).sonar_projectKey }}
          else
              echo No SONAR_TOKEN, skipping...
          fi
#JOB4: package application
  package_application:
    name:  package_application
    needs: [codecov,sonar]
    runs-on: "ubuntu-latest"
    timeout-minutes: 90
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      NODE_VERSION: "16.17.0"
      SPRING_OUTPUT_ANSI_ENABLED: DETECT
      SPRING_JPA_SHOW_SQL: false
      JHI_DISABLE_WEBPACK_LOGS: true
      NG_CLI_ANALYTICS: false
    steps:      
      - name: Package application
        run: npm run java:jar:prod
      - id: auth
        uses: google-github-actions/auth@v0.4.0
        with:
          token_format: "access_token"
          create_credentials_file: true
          activate_credentials_file: true
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_ID }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          access_token_lifetime: '100s'
#JOB5: login to artifact registry and publish docker image 
  publish_to_registry:
    name:  publish_to_registry
    needs: [package_application]
    runs-on: "ubuntu-latest"
    timeout-minutes: 90
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      NODE_VERSION: "16.17.0"
      SPRING_OUTPUT_ANSI_ENABLED: DETECT
      SPRING_JPA_SHOW_SQL: false
      JHI_DISABLE_WEBPACK_LOGS: true
      NG_CLI_ANALYTICS: false
    steps:     
      - name: Login to Artifact Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ fromJson(steps.config.outputs.config).artifact_registry }} 
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      # - name: Build and publish docker image
      #   #if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
      #   run: |
      #     GIT_TAG=:${GITHUB_REF#refs/tags/}
      #     DOCKER_TAG=${GIT_TAG#:refs/heads/main}
      #     ./mvnw -ntp jib:build -Djib.to.image=${{ fromJson(steps.config.outputs.config).image_name }}${DOCKER_TAG}  -Pprod
      - run: |
          chmod +x ci/build.sh   
          ./ci/build.sh