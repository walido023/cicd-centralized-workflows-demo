name: Pipeline CI
on:
  workflow_call:
    inputs:
      runs-on:
        description: The Platform to execute on
        type: string
        default: ubuntu-latest
      node-version:
        description: The version of node to be used
        type: string
        default: 16.17.0
      java-version:
        description: The version of java to be used
        type: string
        default: 11
      sonar_organization:
        description: organisation name for sonar
        type: string
        default: 'walido023'
      sonar_projectKey:
        description: project key for sonar
        type: string
        default: 'walido023_cicd-project-demo'
      image_name:
        description: image name
        type: string
        default: 'europe-west9-docker.pkg.dev/s4a-cicd-poc-sbx-5b20/demo-repo/cicd-demo'  
    secrets:
      SONAR_TOKEN:
        required: true
      CODECOV_TOKEN:
        required: true
      WORKLOAD_IDENTITY_PROVIDER_ID:
        required: true
      SERVICE_ACCOUNT:
        required: true    

jobs:
  maven-pipeline-ci:
    name: maven pipeline ci
    runs-on: ubuntu-latest
    timeout-minutes: 90
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      NODE_VERSION: ${{ inputs.node-version }}
      SPRING_OUTPUT_ANSI_ENABLED: DETECT
      SPRING_JPA_SHOW_SQL: false
      JHI_DISABLE_WEBPACK_LOGS: true
      NG_CLI_ANALYTICS: false
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ inputs.java-version }}
      - name: Install node.js packages
        run: npm install
      # - name: Run backend test
      #   run: |
      #     chmod +x mvnw
      #     npm run ci:backend:test
      # - name: Run frontend test
      #   run: npm run ci:frontend:test
      # - uses: codecov/codecov-action@v3
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     #files: ./coverage1.xml
      #     #flags: unittests # optional
      #     name: codecov-umbrella # optional
      #     #fail_ci_if_error: true # optional (default = false)
      #     verbose: true # optional (default = false)  
      # - name: Analyze code with SonarQube
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: |
      #     if [ ! -z "$SONAR_TOKEN" ]; then
      #         ./mvnw -ntp initialize sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.organization=${{ inputs.sonar_organization }} -Dsonar.projectKey=${{ inputs.sonar_projectKey }}
      #     else
      #         echo No SONAR_TOKEN, skipping...
      #     fi
      - name: Package application
        run: npm run java:jar:prod
      - id: auth
        uses: google-github-actions/auth@v0.4.0
        with:
          token_format: "access_token"
          create_credentials_file: true
          activate_credentials_file: true
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_ID }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          access_token_lifetime: '100s'
      - name: Login to Artifact Registry
        uses: docker/login-action@v1
        with:
          registry: europe-west9-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: Build and publish docker image
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
        run: |
          GIT_TAG=:${GITHUB_REF#refs/tags/}
          DOCKER_TAG=${GIT_TAG#:refs/heads/main}
          ./mvnw -ntp jib:build -Djib.to.image=${{  inputs.image_name  }}${DOCKER_TAG}  -Pprod